push 0
pop rax
push 0
pop rbx
push 0
pop [0]
call main
hlt

main:
push rax
pop  rbx
push rax
push rax
push 4
add
pop rax
pop [rax]
push 0
pop [rbx + 1]
push 0
pop [rbx + 2]
push 0
pop [rbx + 3]
in
pop [rbx + 1]
in
pop [rbx + 2]
in
pop [rbx + 3]
push [rbx + 1]
push 0
jne true_0
push 0
jmp end_comp_0
true_0:
push 1
jmp end_comp_0
end_comp_0:
push 1
je  true_1
jmp false_1
true_1:
push [rbx + 3]
push [rbx + 2]
push [rbx + 1]
call solvesquare
jmp end_cond_1
false_1:
push [rbx + 3]
push [rbx + 2]
call solvelinear
jmp end_cond_1
end_cond_1:
push [rax]
pop rax
push [rax]
pop rbx
ret

solvelinear:
push rax
pop  rbx
push rax
push rax
push 3
add
pop rax
pop [rax]
pop [rbx + 1]
pop [rbx + 2]
push [rbx + 1]
push 0
je true_2
push 0
jmp end_comp_2
true_2:
push 1
jmp end_comp_2
end_comp_2:
push 1
je  true_3
jmp false_3
true_3:
push [rbx + 2]
push 0
je true_4
push 0
jmp end_comp_4
true_4:
push 1
jmp end_comp_4
end_comp_4:
push 1
je  true_5
jmp false_5
true_5:
push 100500
out
jmp end_cond_5
false_5:
push 0
out
jmp end_cond_5
end_cond_5:
jmp end_cond_3
false_3:
push 1
out
push 0
push [rbx + 2]
sub
push [rbx + 1]
div
out
jmp end_cond_3
end_cond_3:
push [rax]
pop rax
push [rax]
pop rbx
ret

solvesquare:
push rax
pop  rbx
push rax
push rax
push 8
add
pop rax
pop [rax]
pop [rbx + 1]
pop [rbx + 2]
pop [rbx + 3]
push [rbx + 2]
push [rbx + 2]
mul
push 4
push [rbx + 1]
mul
push [rbx + 3]
mul
sub
pop [rbx + 4]
push 0
pop [rbx + 5]
push 0
pop [rbx + 6]
push [rbx + 4]
push 0
ja true_6
push 0
jmp end_comp_6
true_6:
push 1
jmp end_comp_6
end_comp_6:
push 1
je  true_7
jmp false_7
true_7:
push [rbx + 4]
sqrt
pop [rbx + 7]
push 0
push [rbx + 2]
sub
push [rbx + 7]
sub
push 2
push [rbx + 1]
mul
div
pop [rbx + 5]
push 0
push [rbx + 2]
sub
push [rbx + 7]
add
push 2
push [rbx + 1]
mul
div
pop [rbx + 6]
push 1
out
push [rbx + 5]
out
push [rbx + 6]
out
jmp end_cond_7
false_7:
push [rbx + 4]
push 0
je true_8
push 0
jmp end_comp_8
true_8:
push 1
jmp end_comp_8
end_comp_8:
push 1
je  true_9
jmp false_9
true_9:
push 0
push [rbx + 2]
sub
push 2
push [rbx + 1]
mul
div
pop [rbx + 5]
push 1
out
push [rbx + 5]
out
jmp end_cond_9
false_9:
push 0
push 0
sub
out
jmp end_cond_9
end_cond_9:
jmp end_cond_7
end_cond_7:
push [rax]
pop rax
push [rax]
pop rbx
ret
